// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/grab/send": {
            "post": {
                "description": "发送消息到指定的抓取服务",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "抓取服务"
                ],
                "summary": "发送消息",
                "parameters": [
                    {
                        "description": "抓取请求",
                        "name": "grab",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Grab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "发送成功",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "解析失败或发送失败",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/monitor/one": {
            "post": {
                "description": "检测指定座位的状态",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控服务"
                ],
                "summary": "检测一个座位的状态",
                "parameters": [
                    {
                        "description": "检测请求",
                        "name": "grab",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Grab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "检测成功",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "解析失败或检测失败",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sse": {
            "get": {
                "description": "处理服务器发送事件（SSE）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "SSE 服务"
                ],
                "summary": "处理 SSE 事件",
                "responses": {
                    "200": {
                        "description": "SSE 事件流",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "服务器错误",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.Grab": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "seat": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
