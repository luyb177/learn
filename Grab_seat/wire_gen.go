// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"learn/Grab_seat/client"
	"learn/Grab_seat/config"
	"learn/Grab_seat/controller"
	"learn/Grab_seat/dao"
	"learn/Grab_seat/route"
	"learn/Grab_seat/service"
)

// Injectors from wire.go:

func InitApp(ConfigPath string) (*route.App, error) {
	viperSetting := config.NewViperSetting(ConfigPath)
	kafkaConfig := config.NewKafkaConfig(viperSetting)
	redisConfig := config.NewRedisConfig(viperSetting)
	redisClient, err := dao.RedisDB(redisConfig)
	if err != nil {
		return nil, err
	}
	grabDAOImpl := dao.NewGrabDAOImpl(redisClient)
	mysqlConfig := config.NewMysqlConfig(viperSetting)
	db, err := dao.MySQLDB(mysqlConfig)
	if err != nil {
		return nil, err
	}
	contentDAOImpl := dao.NewContentDAOImpl(db)
	accountConfig := config.NewAccount(viperSetting)
	clientClient := client.NewClient(accountConfig)
	monitorServiceImpl := service.NewMonitorServiceImpl(clientClient, grabDAOImpl)
	grabServiceImpl := service.NewGrabServiceImpl(kafkaConfig, grabDAOImpl, contentDAOImpl, clientClient, monitorServiceImpl)
	grabController := controller.NewGrabController(grabServiceImpl)
	grabRoot := route.NewGrabRoot(grabController)
	sseServiceImpl := service.NewSseServiceImpl()
	sseController := controller.NewSseController(sseServiceImpl)
	sseRoute := route.NewSseRoute(sseController)
	monitorController := controller.NewMonitorController(monitorServiceImpl)
	monitorRoot := route.NewMonitorRoot(monitorController)
	app := route.NewApp(grabRoot, sseRoute, monitorRoot)
	return app, nil
}
